    /* Parse a E131 packet */
    uint16_t num_channels = e131.parsePacket();
        
    /* Process channel data if we have it, and print it in the serial monitor*/
    if (num_channels) {
        
      // debug information via the serial console

        Serial.printf("Num_channels: %u  Packet#: %u  CH1: %u CH2: %u  CH3: %u  CH4: %u LED: CH5: %u  CH6: %u  CH7: %u  CH8: %u  CH9: %u  CH10: %u  CH11: %u  CH12: %u  CH13: %u  CH14: %u  CH15: %u  CH16: %u  CH17: %u  CH18: %u  CH19: %u  CH20: %u  CH21: %u  CH22: %u  CH23: %u  CH24: %u  CH25: %u  CH26: %u :",
                //e131.universe,              // The Universe for this packet
                num_channels,               // Number of channels in this packet
                e131.stats.num_packets,     // Packet counter
                //e131.stats.packet_errors,   // Packet error counter
                e131.data[0],              // pan 1 data for Channel 1 this chanel for 8bit
                e131.data[1],              // pan 2 data for Channel 2 16b Pan
                e131.data[2],              // tilt 1 data for Channel 3 this chanel for 8bit
                e131.data[3],              // tilt 2 data for Channel 4 16bit tilt
                e131.data[4],e131.data[5],e131.data[6],     // LED 1 RGB Data
                e131.data[7],e131.data[8],e131.data[9],     // LED 2 RGB Data
                e131.data[10],e131.data[11],e131.data[12],  // LED 3 RGB Data
                e131.data[13],e131.data[14],e131.data[15],  // LED 4 RGB Data
                e131.data[16],e131.data[17],e131.data[18],  // LED 5 RGB Data
                e131.data[19],e131.data[20],e131.data[21],  // LED 6 RGB Data
                e131.data[22],e131.data[23],e131.data[24],  // LED 7 RGB Data
                e131.data[25]);                             // Function Data
                     
        
        //  Led Code call on every other packet
        //Serial.printf("Counter: %u", counter); // serial debuging check for skipping e131 packets
        
 //       if (counter == 0) 
 //       {
                //Serial.printf("calling LED Data");  // for debuging
                set_led_data();  // calling LED fuction to set the led colours per pixel
 //               counter++;
 //       } 
//        else if (counter == 1) 
//        {
//                //Serial.printf("Reseting counter");  // for debuging
//                counter--;
//        }      

        // get Pan/Tilt channel datat
        pan_data1 = e131.data[0];
        pan_data2 = e131.data[1];
        tilt_data1 = e131.data[2];
        tilt_data2 = e131.data[3];
                       
        // 16 bit math 
        pan_data = (pan_data1 *256) + pan_data2;
        tilt_data = (tilt_data1 * 256) + tilt_data2;


        // 8b angle
        //pan_angle = map(pan_data1,0,255,0,180);
        //tilt_angle = map(tilt_data1,0,255,0,180);

        // 16b angle
        pan_angle = map(pan_data,0,65025,550,2330);
        tilt_angle = map(tilt_data,0,65025,550,2330);
        
        if (pan_angle_last != pan_angle) {
                // for 16b fiture
                pan_servo.writeMicroseconds(pan_angle);
               pan_angle_last = pan_angle;
                tilt_servo.writeMicroseconds(tilt_angle);
                
                // for 8 bit fixture
                //pan_servo.write(pan_angle);
                //tilt_servo.write(tilt_angle);
                
               Serial.printf("Pan Data: %u  Pan angle: %u   Tilt Data %u   Tilt angle: %u\n",
                        pan_data,
                        pan_angle,
                        tilt_data,
                        tilt_angle);
                delayMicroseconds(20);
                }
        else
        {
                printf("\n");
        }
        

        
        delay(20);

        
        

     }